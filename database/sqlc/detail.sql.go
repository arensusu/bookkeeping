// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: detail.sql

package db

import (
	"context"
	"time"
)

const createDetail = `-- name: CreateDetail :one
INSERT INTO details (user_id, category_id, cost, date)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, category_id, cost, date, created_at
`

type CreateDetailParams struct {
	UserID     int64     `json:"user_id"`
	CategoryID int64     `json:"category_id"`
	Cost       int64     `json:"cost"`
	Date       time.Time `json:"date"`
}

func (q *Queries) CreateDetail(ctx context.Context, arg CreateDetailParams) (Detail, error) {
	row := q.db.QueryRowContext(ctx, createDetail,
		arg.UserID,
		arg.CategoryID,
		arg.Cost,
		arg.Date,
	)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Cost,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDetail = `-- name: DeleteDetail :exec
DELETE FROM details
WHERE id = $1
`

func (q *Queries) DeleteDetail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDetail, id)
	return err
}

const getDetailById = `-- name: GetDetailById :one
SELECT id, user_id, category_id, cost, date, created_at
FROM details
WHERE id = $1
`

func (q *Queries) GetDetailById(ctx context.Context, id int64) (Detail, error) {
	row := q.db.QueryRowContext(ctx, getDetailById, id)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Cost,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const listDetailsByUserId = `-- name: ListDetailsByUserId :many
SELECT id, user_id, category_id, cost, date, created_at
FROM details
WHERE user_id = $1
ORDER BY date ASC
LIMIT $2
OFFSET $3
`

type ListDetailsByUserIdParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDetailsByUserId(ctx context.Context, arg ListDetailsByUserIdParams) ([]Detail, error) {
	rows, err := q.db.QueryContext(ctx, listDetailsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Detail
	for rows.Next() {
		var i Detail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Cost,
			&i.Date,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDetail = `-- name: UpdateDetail :one
UPDATE details
SET category_id = $2, cost = $3, date = $4
WHERE id = $1
RETURNING id, user_id, category_id, cost, date, created_at
`

type UpdateDetailParams struct {
	ID         int64     `json:"id"`
	CategoryID int64     `json:"category_id"`
	Cost       int64     `json:"cost"`
	Date       time.Time `json:"date"`
}

func (q *Queries) UpdateDetail(ctx context.Context, arg UpdateDetailParams) (Detail, error) {
	row := q.db.QueryRowContext(ctx, updateDetail,
		arg.ID,
		arg.CategoryID,
		arg.Cost,
		arg.Date,
	)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Cost,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}
